<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ezio Ruan&#39;s Blog</title>
  <icon>https://ezioruan.github.io/icon.png</icon>
  <subtitle>Life is Strange</subtitle>
  <link href="https://ezioruan.github.io/atom.xml" rel="self"/>
  
  <link href="https://ezioruan.github.io/"/>
  <updated>2025-07-07T08:42:08.774Z</updated>
  <id>https://ezioruan.github.io/</id>
  
  <author>
    <name>Ezio Ruan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Use Fauxpilot as an alternative to GitHub Copilot for offline code assistance in VSCode and Vim.</title>
    <link href="https://ezioruan.github.io/2024/04/17/use_fauxpilot_as_github_copilot_alternative/"/>
    <id>https://ezioruan.github.io/2024/04/17/use_fauxpilot_as_github_copilot_alternative/</id>
    <published>2024-04-17T15:18:15.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;Why-Use-Fauxpilot&quot;&gt;&lt;a href=&quot;#Why-Use-Fauxpilot&quot; class=&quot;headerlink&quot; title=&quot;Why Use Fauxpilot?&quot;&gt;&lt;/a&gt;Why Use Fauxpilot?&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/fauxpilot/fauxpilot&quot;&gt;Fauxpilot&lt;/a&gt; is an open-source alternative to GitHub Copilot, leveraging the power of large-scale models to deliver a range of AI-driven functionalities, including dialogue and code suggestions. In this article, we’ll focus exclusively on its code suggestion capabilities, with other features to be detailed in future posts.&lt;/p&gt;
&lt;h3 id=&quot;Local-Setup&quot;&gt;&lt;a href=&quot;#Local-Setup&quot; class=&quot;headerlink&quot; title=&quot;Local Setup&quot;&gt;&lt;/a&gt;Local Setup&lt;/h3&gt;&lt;p&gt;To run Fauxpilot, the following prerequisites must be met:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Windows or Linux system with an NVIDIA graphics card.&lt;/li&gt;
&lt;li&gt;At least 50GB of local storage space (required for the large model).&lt;/li&gt;
&lt;li&gt;Docker and &lt;a href=&quot;https://github.com/NVIDIA/nvidia-container-toolkit&quot;&gt;nvidia-container-toolkit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;zstd&lt;/code&gt; command-line tools, necessary for model downloads.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am using Ubuntu.&lt;/p&gt;
&lt;p&gt;The Docker installation is simple and won’t be elaborated here. The NVIDIA Container Toolkit is a project that enables containers to utilize NVIDIA GPU resources. The following commands can be used for installation:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Configure the production repository:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;&amp;amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sed &amp;#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&amp;#x27; | \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Configure the repository to use experimental packages: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i -e &amp;#x27;/experimental/ s/^#//g&amp;#x27; /etc/apt/sources.list.d/nvidia-container-toolkit.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Update and install:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update &amp;amp;&amp;amp; apt-get install -y nvidia-container-toolkit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Configure the container runtime to use NVIDIA GPUs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo nvidia-ctk runtime configure --runtime=docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Then, simply restart Docker:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo systemctl restart docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Installation methods for other systems can be found in the complete &lt;a href=&quot;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&quot;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, enter the project root directory and run the startup script directly:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd fauxpilot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./setup.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="ai tools" scheme="https://ezioruan.github.io/tags/ai-tools/"/>
    
  </entry>
  
  <entry>
    <title>How to Deploy a Fast One-Click Face Swapping Software on Hugging Face</title>
    <link href="https://ezioruan.github.io/2023/07/04/deploy-your-first-faceswap-app-in-hugging-face/"/>
    <id>https://ezioruan.github.io/2023/07/04/deploy-your-first-faceswap-app-in-hugging-face/</id>
    <published>2023-07-04T15:07:06.000Z</published>
    <updated>2025-07-07T08:42:08.773Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1-Introduction-to-Hugging-Face&quot;&gt;&lt;a href=&quot;#1-Introduction-to-Hugging-Face&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction to Hugging</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Build high availability architecture in oracle cloud</title>
    <link href="https://ezioruan.github.io/2022/08/10/build-high-availability-architecture-in-oracle-cloud/"/>
    <id>https://ezioruan.github.io/2022/08/10/build-high-availability-architecture-in-oracle-cloud/</id>
    <published>2022-08-10T15:07:06.000Z</published>
    <updated>2025-07-07T08:42:08.773Z</updated>
    
    
    <summary type="html">&lt;p&gt;This article will introduce how to use Oracle Cloud to build a highly available, cross-regional system. We know that high availability describes a system that is available most of the time and can provide us with services. High availability means the service is still available even during a hardware failure or system upgrade. Eliminate single points of failure through proper use of deploying instances across multiple availability domains&lt;br&gt;We’ll create load balancers in three different regions, each with two servers at least behind them that use the same application and expose the same ports.&lt;/p&gt;
&lt;p&gt;Let’s take a look at our system design architecture design first.&lt;br&gt;&lt;img src=&quot;/images/oracle/architecture.png&quot; alt=&quot;architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this architecture, We create three load-balancers distributed in the us-west, us-east, and Europe regions.&lt;br&gt;So we have three regions with identical resources. And the traffic will route to the specific load balancer with rules. And fallback to other load balancers.&lt;br&gt;We’ll show how to create this architecture step by step&lt;/p&gt;</summary>
    
    
    
    
    <category term="System Architecture" scheme="https://ezioruan.github.io/tags/System-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>how to acquire ssl certificate for oracle cloud loadbalcer</title>
    <link href="https://ezioruan.github.io/2022/07/27/how-to-acquire-ssl-certificate-for-oracle-cloud/"/>
    <id>https://ezioruan.github.io/2022/07/27/how-to-acquire-ssl-certificate-for-oracle-cloud/</id>
    <published>2022-07-27T08:18:15.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;for example we will acquire ssl certificate for ezioruan.com&lt;/p&gt;
&lt;h1 id=&quot;install&quot;&gt;&lt;a href=&quot;#install&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>How to do data migration</title>
    <link href="https://ezioruan.github.io/2022/07/18/how-to-do-data-migration/"/>
    <id>https://ezioruan.github.io/2022/07/18/how-to-do-data-migration/</id>
    <published>2022-07-18T08:18:15.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
    <summary type="html">&lt;p&gt;#What is Data Migration?&lt;br&gt;Data migration is the process of moving data from one system to another. While this might seem straightforward, it involves storage, database, or application change.&lt;br&gt;Any data migration will involve at least the transform and load steps in the context of the extract&amp;#x2F;transform&amp;#x2F;load (ETL) process. This means that extracted data needs to go through a series of functions in preparation, after which it can be loaded into a target location.&lt;/p&gt;
&lt;p&gt;A strategic data migration plan should include consideration of these critical factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Knowing the data&lt;/em&gt; — Before migration, source data must undergo a complete audit. Unexpected issues can surface if this step is ignored.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cleanup&lt;/em&gt; — Once you identify any issues with your source data, they must be resolved. This may require additional software tools and third-party resources because of the scale of the work.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Maintenance&lt;/em&gt; and protection — Data undergoes degradation after some time, making it unreliable. This means there must be controls in place to maintain data quality.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Governance&lt;/em&gt; — Tracking and reporting on data quality is crucial because it enables a better understanding of data integrity. The processes and tools used to produce this information should be highly usable and automate functions where possible.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="System Architecture" scheme="https://ezioruan.github.io/tags/System-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>How to Configure VLANs and DHCP using dnsmasq and veth pairs in Linux</title>
    <link href="https://ezioruan.github.io/2022/07/10/How_to_Configure_VLANs_and_DHCP_using_dnsmasq_and_veth_pairs_in_Linux/"/>
    <id>https://ezioruan.github.io/2022/07/10/How_to_Configure_VLANs_and_DHCP_using_dnsmasq_and_veth_pairs_in_Linux/</id>
    <published>2022-07-10T15:07:06.000Z</published>
    <updated>2025-07-07T08:42:08.773Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Configuring-VLANs-and-DHCP-for-User-Groups&quot;&gt;&lt;a href=&quot;#Configuring-VLANs-and-DHCP-for-User-Groups&quot; class=&quot;headerlink&quot; title=&quot;Configuring VLANs and DHCP for User Groups&quot;&gt;&lt;/a&gt;Configuring VLANs and DHCP for User Groups&lt;/h1&gt;&lt;p&gt;In a network environment, it is sometimes necessary to segment different user groups to improve security and performance. VLANs (Virtual Local Area Networks) provide a way to do this by dividing a physical network into multiple logical networks. This allows different user groups to be isolated from each other and to have their own set of configurations, such as DHCP (Dynamic Host Configuration Protocol) settings.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will go through the steps of configuring VLANs and DHCP for different user groups.&lt;/p&gt;
&lt;h2 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;Before we begin, we assume that you have the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Linux machine with a network interface named tap_home that is connected to a physical network&lt;/li&gt;
&lt;li&gt;Root access to the Linux machine&lt;/li&gt;
&lt;li&gt;Basic knowledge of networking concepts, such as IP addresses and subnets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/How_to_Configure_VLANs_and_DHCP_using_dnsmasq_and_veth_pairs_in_Linux.png&quot; alt=&quot;network_topology-overview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Creating-VLANs&quot;&gt;&lt;a href=&quot;#Creating-VLANs&quot; class=&quot;headerlink&quot; title=&quot;Creating VLANs&quot;&gt;&lt;/a&gt;Creating VLANs&lt;/h2&gt;&lt;p&gt;The first step is to create VLANs for each user group. We will create two VLANs, one for each user group, with IDs 100 and 200.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip link add link tap_home name tap_home.100 type vlan id 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip link add link tap_home name tap_home.200 type vlan id 200&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Networking" scheme="https://ezioruan.github.io/tags/Networking/"/>
    
  </entry>
  
  <entry>
    <title>Develop APISIX plugin via Golang</title>
    <link href="https://ezioruan.github.io/2022/03/08/develop-apisix-plugin-via-go/"/>
    <id>https://ezioruan.github.io/2022/03/08/develop-apisix-plugin-via-go/</id>
    <published>2022-03-08T08:18:15.000Z</published>
    <updated>2025-07-07T08:42:08.773Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Develop-APISIX-plugin-via-Golang&quot;&gt;&lt;a href=&quot;#Develop-APISIX-plugin-via-Golang&quot; class=&quot;headerlink&quot; title=&quot;Develop APISIX plugin via Golang&quot;&gt;&lt;/a&gt;Develop APISIX plugin via Golang&lt;/h1&gt;&lt;p&gt;APISIX allows users to extend functions through plugins, Although the Apache APISIX kernel code is written in Lua by the plugin, Apache APISIX supports the development of plugins in multiple languages, such as Go and Java. This article will explain in detail how to use plugins to develop Apache APISIX.&lt;br&gt;We will write an HTTP base auth plugin in Golang&lt;/p&gt;
&lt;h2 id=&quot;write-the-plugin&quot;&gt;&lt;a href=&quot;#write-the-plugin&quot; class=&quot;headerlink&quot; title=&quot;write the plugin&quot;&gt;&lt;/a&gt;write the plugin&lt;/h2&gt;&lt;h3 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Go (&amp;gt;&amp;#x3D; 1.15)&lt;/li&gt;
&lt;li&gt;apisix-go-plugin-runner&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s look at the Plugin interface, To write a custom plugin, we need to implement the plugin’s interface  &lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type Plugin interface &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // Name returns the plguin name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Name() string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // ParseConf is the method to parse the given plugin configuration. When the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // configuration can&amp;#x27;t be parsed, it will be skipped.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ParseConf(in []byte) (conf interface&amp;#123;&amp;#125;, err error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // Filter is the method to handle request.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // It is like the `http.ServeHTTP`, plus the ctx and the configuration created by&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // ParseConf.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // When the `w` is written, the execution of the plugin chain will be stopped.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // We don&amp;#x27;t use onion model like Gin/Caddy because we don&amp;#x27;t serve the whole request lifecycle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // inside the runner. The plugin is only a filter running at one stage.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Filter(conf interface&amp;#123;&amp;#125;, w http.ResponseWriter, r pkgHTTP.Request)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="System Architecture" scheme="https://ezioruan.github.io/tags/System-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Exploring Structural Pattern Matching in Python 3.10</title>
    <link href="https://ezioruan.github.io/2022/02/18/exploring-structural-pattern-matching-python-3-10/"/>
    <id>https://ezioruan.github.io/2022/02/18/exploring-structural-pattern-matching-python-3-10/</id>
    <published>2022-02-18T09:00:00.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
    <summary type="html">&lt;p&gt;Python 3.10 introduced a host of new features, but perhaps the most talked-about is Structural Pattern Matching. This feature, introduced in PEP 634, adds a &lt;code&gt;match&lt;/code&gt; statement that behaves like a &lt;code&gt;switch&lt;/code&gt; statement found in other languages, but with much more power and flexibility. It allows you to match variables against a variety of patterns, making complex conditional logic more readable and less error-prone.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python, Python3.10, Pattern Matching" scheme="https://ezioruan.github.io/tags/Python-Python3-10-Pattern-Matching/"/>
    
  </entry>
  
  <entry>
    <title>resize disk sise for ubuntu instance in Oracle Cloud</title>
    <link href="https://ezioruan.github.io/2022/02/08/resize-disk-on-ubuntu-oracle-cloud/"/>
    <id>https://ezioruan.github.io/2022/02/08/resize-disk-on-ubuntu-oracle-cloud/</id>
    <published>2022-02-08T08:18:15.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;oracle has tools to increase disk sise for Oracle Image, but not ubuntu, we need to do it manualy&lt;/p&gt;
&lt;p&gt;The script internally calls</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Async/Await: A Tale of Two Runtimes (Node.js vs. Python)</title>
    <link href="https://ezioruan.github.io/2021/12/15/async-await-nodejs-vs-python/"/>
    <id>https://ezioruan.github.io/2021/12/15/async-await-nodejs-vs-python/</id>
    <published>2021-12-15T11:00:00.000Z</published>
    <updated>2025-07-07T08:42:08.773Z</updated>
    
    
    <summary type="html">&lt;p&gt;Both Node.js and Python have embraced the &lt;code&gt;async/await&lt;/code&gt; syntax to simplify asynchronous programming. While the keywords are the same and the high-level concept is similar—making asynchronous code look synchronous—the underlying models and ecosystems have key differences. Understanding these distinctions is crucial for developers working in both environments.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python, Node.js, asyncio, Concurrency" scheme="https://ezioruan.github.io/tags/Python-Node-js-asyncio-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Python&#39;s Async/Await: Common Pitfalls and How to Avoid Them</title>
    <link href="https://ezioruan.github.io/2021/11/12/python-async-await-pitfalls/"/>
    <id>https://ezioruan.github.io/2021/11/12/python-async-await-pitfalls/</id>
    <published>2021-11-12T09:20:00.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
    <summary type="html">&lt;p&gt;Python’s &lt;code&gt;asyncio&lt;/code&gt; library, along with the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords, has brought powerful concurrency capabilities to the language. It allows developers to write highly scalable I&amp;#x2F;O-bound applications. However, the asynchronous paradigm introduces new challenges and potential pitfalls that can trip up even experienced developers. This article highlights some of the most common traps and how to avoid them.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python, asyncio, Concurrency" scheme="https://ezioruan.github.io/tags/Python-asyncio-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Practical Type Hinting in Python with MyPy</title>
    <link href="https://ezioruan.github.io/2021/09/10/practical-type-hinting-with-mypy/"/>
    <id>https://ezioruan.github.io/2021/09/10/practical-type-hinting-with-mypy/</id>
    <published>2021-09-10T14:00:00.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
    <summary type="html">&lt;p&gt;Python has always been a dynamically typed language, which is a key part of its flexibility and ease of use. However, for large and complex codebases, the lack of static type checking can lead to bugs that are hard to find. Since PEP 484, Python has official support for type hints, and tools like MyPy allow us to bring the benefits of static type checking to our Python projects.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python, MyPy, Type Hinting, Development" scheme="https://ezioruan.github.io/tags/Python-MyPy-Type-Hinting-Development/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Error Handling: A Practical Guide to Robust Applications</title>
    <link href="https://ezioruan.github.io/2021/07/22/nodejs-error-handling-guide/"/>
    <id>https://ezioruan.github.io/2021/07/22/nodejs-error-handling-guide/</id>
    <published>2021-07-22T15:00:00.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
    <summary type="html">&lt;p&gt;Building a robust Node.js application requires more than just writing functional code; it demands a solid error handling strategy. Unhandled errors can crash your server, leading to downtime and a poor user experience. This guide covers the essential patterns and best practices for handling errors effectively in your Node.js projects.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Node.js, Error Handling, Best Practices" scheme="https://ezioruan.github.io/tags/Node-js-Error-Handling-Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with FastAPI for High-Performance APIs</title>
    <link href="https://ezioruan.github.io/2021/05/20/getting-started-with-fastapi/"/>
    <id>https://ezioruan.github.io/2021/05/20/getting-started-with-fastapi/</id>
    <published>2021-05-20T11:30:00.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
    <summary type="html">&lt;p&gt;When it comes to building APIs in Python, frameworks like Flask and Django have long been the go-to choices. However, a newer framework has rapidly gained popularity for its incredible performance and developer-friendly features: FastAPI. Built on top of Starlette and Pydantic, FastAPI makes it easy to create modern, fast, and well-documented APIs.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python, FastAPI, Web Development, API" scheme="https://ezioruan.github.io/tags/Python-FastAPI-Web-Development-API/"/>
    
  </entry>
  
  <entry>
    <title>Mastering Python Virtual Environments: From venv to pip-tools</title>
    <link href="https://ezioruan.github.io/2021/01/25/mastering-python-virtual-environments/"/>
    <id>https://ezioruan.github.io/2021/01/25/mastering-python-virtual-environments/</id>
    <published>2021-01-25T10:00:00.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
    <summary type="html">&lt;p&gt;In the world of Python development, managing dependencies and project-specific environments is a foundational skill. It ensures that your projects are isolated, reproducible, and free from conflicts. For years, the standard has been &lt;code&gt;venv&lt;/code&gt; combined with a &lt;code&gt;requirements.txt&lt;/code&gt; file. In this post, we’ll revisit this classic approach and then explore how &lt;code&gt;pip-tools&lt;/code&gt; can significantly improve the workflow.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python, Development, venv, pip-tools" scheme="https://ezioruan.github.io/tags/Python-Development-venv-pip-tools/"/>
    
  </entry>
  
  <entry>
    <title>gpg unusable key</title>
    <link href="https://ezioruan.github.io/2020/02/08/gpg-unusable-public-key/"/>
    <id>https://ezioruan.github.io/2020/02/08/gpg-unusable-public-key/</id>
    <published>2020-02-08T08:18:15.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;fix-gpg-unusable-key&quot;&gt;&lt;a href=&quot;#fix-gpg-unusable-key&quot; class=&quot;headerlink&quot; title=&quot;fix gpg unusable key&quot;&gt;&lt;/a&gt;fix gpg unusable</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>setup sftp account and two differences authentication logins</title>
    <link href="https://ezioruan.github.io/2016/06/17/setup-sftp-account-and-two-ways-login/"/>
    <id>https://ezioruan.github.io/2016/06/17/setup-sftp-account-and-two-ways-login/</id>
    <published>2016-06-17T15:18:15.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的漫画下载脚本</title>
    <link href="https://ezioruan.github.io/2016/03/04/a-simple-comic-script/"/>
    <id>https://ezioruan.github.io/2016/03/04/a-simple-comic-script/</id>
    <published>2016-03-04T15:07:06.000Z</published>
    <updated>2025-07-07T08:42:08.773Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近看暗杀教室实在是太麻烦了。手机app不更新 贴吧只有最新一话 网页在线看广告多得要死&lt;/p&gt;
&lt;p&gt;简单的写了下 只针对暗杀教室这个漫画 不过其他漫画理论上也是可以的&lt;br&gt;地址在 &lt;a</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>解决xcode升级vim插件无法使用问题</title>
    <link href="https://ezioruan.github.io/2016/01/21/fix_vim_hangs_due_to_xcode_upgrade/"/>
    <id>https://ezioruan.github.io/2016/01/21/fix_vim_hangs_due_to_xcode_upgrade/</id>
    <published>2016-01-21T19:24:00.000Z</published>
    <updated>2025-07-07T08:42:08.774Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;xcode经常升级，升级以后以前的插件都不能用了 其实是因为xcode升级以后产品id变掉了&lt;br&gt;这个确实坑爹 都没有做自动适配的&lt;/p&gt;
&lt;p&gt;一行代码搞定冲突&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
</feed>
