<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ezio Ruan&#39;s Blog</title>
  <icon>https://ezioruan.github.io/icon.png</icon>
  <subtitle>Life is Strange</subtitle>
  <link href="https://ezioruan.github.io/atom.xml" rel="self"/>
  
  <link href="https://ezioruan.github.io/"/>
  <updated>2025-07-12T06:02:34.558Z</updated>
  <id>https://ezioruan.github.io/</id>
  
  <author>
    <name>Ezio Ruan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://ezioruan.github.io/2025/07/12/docker-best-practices/"/>
    <id>https://ezioruan.github.io/2025/07/12/docker-best-practices/</id>
    <published>2025-07-12T06:02:34.558Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;—title: “Docker Best Practices: Writing Optimized and Secure Dockerfiles”date: 2022-10-05 11:20:00tags: Docker, Containerization, DevOps, Best Practices—Docker has revolutionized how we build, ship, and run applications. At the heart of a good container is a well-crafted &lt;code&gt;Dockerfile&lt;/code&gt;. While it’s easy to get an application running in a container, creating an image that is small, secure, and fast requires following a set of best practices. This guide covers the essentials for writing optimized and secure Dockerfiles.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Beyond Basic Prompts: Understanding Retrieval-Augmented Generation (RAG) in AI Apps</title>
    <link href="https://ezioruan.github.io/2024/04/22/understanding-retrieval-augmented-generation/"/>
    <id>https://ezioruan.github.io/2024/04/22/understanding-retrieval-augmented-generation/</id>
    <published>2024-04-22T14:30:00.000Z</published>
    <updated>2025-07-12T06:02:34.559Z</updated>
    
    
    <summary type="html">&lt;p&gt;Large Language Models (LLMs) like GPT-4 are incredibly powerful, but they have two fundamental limitations: they don’t know anything about events that occurred after their training cut-off date, and they don’t have access to your private, domain-specific data. This can lead to outdated or generic responses. The solution to this problem is a powerful architectural pattern called &lt;strong&gt;Retrieval-Augmented Generation (RAG)&lt;/strong&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="AI, LLM, RAG, Architecture" scheme="https://ezioruan.github.io/tags/AI-LLM-RAG-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Use Fauxpilot as an alternative to GitHub Copilot for offline code assistance in VSCode and Vim.</title>
    <link href="https://ezioruan.github.io/2024/04/17/use_fauxpilot_as_github_copilot_alternative/"/>
    <id>https://ezioruan.github.io/2024/04/17/use_fauxpilot_as_github_copilot_alternative/</id>
    <published>2024-04-17T15:18:15.000Z</published>
    <updated>2025-07-12T06:02:34.559Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;Why-Use-Fauxpilot&quot;&gt;&lt;a href=&quot;#Why-Use-Fauxpilot&quot; class=&quot;headerlink&quot; title=&quot;Why Use Fauxpilot?&quot;&gt;&lt;/a&gt;Why Use Fauxpilot?&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/fauxpilot/fauxpilot&quot;&gt;Fauxpilot&lt;/a&gt; is an open-source alternative to GitHub Copilot, leveraging the power of large-scale models to deliver a range of AI-driven functionalities, including dialogue and code suggestions. In this article, we’ll focus exclusively on its code suggestion capabilities, with other features to be detailed in future posts.&lt;/p&gt;
&lt;h3 id=&quot;Local-Setup&quot;&gt;&lt;a href=&quot;#Local-Setup&quot; class=&quot;headerlink&quot; title=&quot;Local Setup&quot;&gt;&lt;/a&gt;Local Setup&lt;/h3&gt;&lt;p&gt;To run Fauxpilot, the following prerequisites must be met:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Windows or Linux system with an NVIDIA graphics card.&lt;/li&gt;
&lt;li&gt;At least 50GB of local storage space (required for the large model).&lt;/li&gt;
&lt;li&gt;Docker and &lt;a href=&quot;https://github.com/NVIDIA/nvidia-container-toolkit&quot;&gt;nvidia-container-toolkit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;zstd&lt;/code&gt; command-line tools, necessary for model downloads.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am using Ubuntu.&lt;/p&gt;
&lt;p&gt;The Docker installation is simple and won’t be elaborated here. The NVIDIA Container Toolkit is a project that enables containers to utilize NVIDIA GPU resources. The following commands can be used for installation:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Configure the production repository:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;&amp;amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sed &amp;#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&amp;#x27; | \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Configure the repository to use experimental packages: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i -e &amp;#x27;/experimental/ s/^#//g&amp;#x27; /etc/apt/sources.list.d/nvidia-container-toolkit.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Update and install:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update &amp;amp;&amp;amp; apt-get install -y nvidia-container-toolkit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Configure the container runtime to use NVIDIA GPUs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo nvidia-ctk runtime configure --runtime=docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Then, simply restart Docker:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo systemctl restart docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Installation methods for other systems can be found in the complete &lt;a href=&quot;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&quot;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, enter the project root directory and run the startup script directly:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd fauxpilot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./setup.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="ai tools" scheme="https://ezioruan.github.io/tags/ai-tools/"/>
    
  </entry>
  
  <entry>
    <title>The New King of Python Packaging? A First Look at `uv`</title>
    <link href="https://ezioruan.github.io/2024/03/15/a-first-look-at-uv/"/>
    <id>https://ezioruan.github.io/2024/03/15/a-first-look-at-uv/</id>
    <published>2024-03-15T12:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;The Python packaging ecosystem is powerful but notoriously fragmented. A typical project might use &lt;code&gt;venv&lt;/code&gt; for environments, &lt;code&gt;pip&lt;/code&gt; for installation, &lt;code&gt;pip-tools&lt;/code&gt; for locking dependencies, and maybe &lt;code&gt;pipx&lt;/code&gt; for running tools in isolation. This collection of tools, while functional, can be confusing for newcomers and cumbersome for experts. Enter &lt;code&gt;uv&lt;/code&gt;, a new tool from Astral (the creators of the &lt;code&gt;ruff&lt;/code&gt; linter) that aims to change everything.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python, Packaging, uv, Ruff" scheme="https://ezioruan.github.io/tags/Python-Packaging-uv-Ruff/"/>
    
  </entry>
  
  <entry>
    <title>Building LLM Apps Without the Hassle: An Introduction to Dify and FastGPT</title>
    <link href="https://ezioruan.github.io/2024/02/20/building-llm-apps-with-dify-and-fastgpt/"/>
    <id>https://ezioruan.github.io/2024/02/20/building-llm-apps-with-dify-and-fastgpt/</id>
    <published>2024-02-20T10:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;The rise of Large Language Models (LLMs) has opened a new frontier for application development. However, building, deploying, and managing these AI-powered apps can be complex, involving everything from prompt engineering to backend service management. To address this, a new category of tools has emerged: LLM-Ops platforms. Among the most popular open-source options are Dify and FastGPT, which aim to simplify the entire lifecycle of creating and managing LLM applications.&lt;/p&gt;</summary>
    
    
    
    
    <category term="AI, LLM, Dify, FastGPT, Low-Code" scheme="https://ezioruan.github.io/tags/AI-LLM-Dify-FastGPT-Low-Code/"/>
    
  </entry>
  
  <entry>
    <title>The Power of Agents in LangChain: Giving LLMs Tools and Autonomy</title>
    <link href="https://ezioruan.github.io/2023/10/25/langchain-agents-and-tools/"/>
    <id>https://ezioruan.github.io/2023/10/25/langchain-agents-and-tools/</id>
    <published>2023-10-25T11:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;While Large Language Models (LLMs) are masters of language, their knowledge is static and they can’t interact with the outside world. They can’t check the current weather, perform a calculation, or look up information on a website. This is where the concept of &lt;strong&gt;Agents&lt;/strong&gt; in LangChain comes in. An agent is a system that uses an LLM as its reasoning engine to decide which actions to take to accomplish a goal.&lt;/p&gt;</summary>
    
    
    
    
    <category term="AI, LLM, LangChain, Agents, Python" scheme="https://ezioruan.github.io/tags/AI-LLM-LangChain-Agents-Python/"/>
    
  </entry>
  
  <entry>
    <title>A Practical Guide to Training Your First Machine Learning Model with Scikit-learn</title>
    <link href="https://ezioruan.github.io/2023/08/22/training-first-ml-model-with-scikit-learn/"/>
    <id>https://ezioruan.github.io/2023/08/22/training-first-ml-model-with-scikit-learn/</id>
    <published>2023-08-22T15:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.559Z</updated>
    
    
    <summary type="html">&lt;p&gt;Machine learning can seem intimidating, often associated with complex mathematics and huge datasets. However, thanks to powerful libraries like Scikit-learn, training your first model is more accessible than ever. This guide will walk you through the fundamental steps of a machine learning project, from loading data to making predictions, using a classic example: classifying iris flowers.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Machine Learning, Python, Scikit-learn, Data Science" scheme="https://ezioruan.github.io/tags/Machine-Learning-Python-Scikit-learn-Data-Science/"/>
    
  </entry>
  
  <entry>
    <title>How to Deploy a Fast One-Click Face Swapping Software on Hugging Face</title>
    <link href="https://ezioruan.github.io/2023/07/04/deploy-your-first-faceswap-app-in-hugging-face/"/>
    <id>https://ezioruan.github.io/2023/07/04/deploy-your-first-faceswap-app-in-hugging-face/</id>
    <published>2023-07-04T15:07:06.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1-Introduction-to-Hugging-Face&quot;&gt;&lt;a href=&quot;#1-Introduction-to-Hugging-Face&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction to Hugging</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with LangChain: Building Your First LLM-Powered Application</title>
    <link href="https://ezioruan.github.io/2023/04/18/getting-started-with-langchain/"/>
    <id>https://ezioruan.github.io/2023/04/18/getting-started-with-langchain/</id>
    <published>2023-04-18T10:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;If you’ve been exploring the world of Large Language Models (LLMs), you’ve likely heard of LangChain. It’s a powerful open-source framework designed to simplify the creation of applications powered by LLMs. LangChain provides a set of modular components and off-the-shelf “chains” that make it easy to build everything from simple prompt-response bots to complex, data-aware agents.&lt;/p&gt;
&lt;p&gt;This guide will introduce you to the core concepts of LangChain and walk you through building your first LLM-powered application.&lt;/p&gt;</summary>
    
    
    
    
    <category term="AI, LLM, LangChain, Python" scheme="https://ezioruan.github.io/tags/AI-LLM-LangChain-Python/"/>
    
  </entry>
  
  <entry>
    <title>What Are Vector Databases? The Powerhouse Behind Modern AI Search</title>
    <link href="https://ezioruan.github.io/2022/12/20/what-are-vector-databases/"/>
    <id>https://ezioruan.github.io/2022/12/20/what-are-vector-databases/</id>
    <published>2022-12-20T16:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.559Z</updated>
    
    
    <summary type="html">&lt;p&gt;With the explosion of large language models (LLMs) and other deep learning applications, a new kind of data has become central to AI: vector embeddings. These dense numerical representations of text, images, or audio have one major problem—they are notoriously difficult to search efficiently. This is where a new type of database, the vector database, comes into play.&lt;/p&gt;</summary>
    
    
    
    
    <category term="AI, Vector Database, Embeddings, Backend" scheme="https://ezioruan.github.io/tags/AI-Vector-Database-Embeddings-Backend/"/>
    
  </entry>
  
  <entry>
    <title>Build high availability architecture in oracle cloud</title>
    <link href="https://ezioruan.github.io/2022/08/10/build-high-availability-architecture-in-oracle-cloud/"/>
    <id>https://ezioruan.github.io/2022/08/10/build-high-availability-architecture-in-oracle-cloud/</id>
    <published>2022-08-10T15:07:06.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;This article will introduce how to use Oracle Cloud to build a highly available, cross-regional system. We know that high availability describes a system that is available most of the time and can provide us with services. High availability means the service is still available even during a hardware failure or system upgrade. Eliminate single points of failure through proper use of deploying instances across multiple availability domains&lt;br&gt;We’ll create load balancers in three different regions, each with two servers at least behind them that use the same application and expose the same ports.&lt;/p&gt;
&lt;p&gt;Let’s take a look at our system design architecture design first.&lt;br&gt;&lt;img src=&quot;/images/oracle/architecture.png&quot; alt=&quot;architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this architecture, We create three load-balancers distributed in the us-west, us-east, and Europe regions.&lt;br&gt;So we have three regions with identical resources. And the traffic will route to the specific load balancer with rules. And fallback to other load balancers.&lt;br&gt;We’ll show how to create this architecture step by step&lt;/p&gt;</summary>
    
    
    
    
    <category term="System Architecture" scheme="https://ezioruan.github.io/tags/System-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>how to acquire ssl certificate for oracle cloud loadbalcer</title>
    <link href="https://ezioruan.github.io/2022/07/27/how-to-acquire-ssl-certificate-for-oracle-cloud/"/>
    <id>https://ezioruan.github.io/2022/07/27/how-to-acquire-ssl-certificate-for-oracle-cloud/</id>
    <published>2022-07-27T08:18:15.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;for example we will acquire ssl certificate for ezioruan.com&lt;/p&gt;
&lt;h1 id=&quot;install&quot;&gt;&lt;a href=&quot;#install&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Managing Your Infrastructure with Terraform: A Beginner&#39;s Guide</title>
    <link href="https://ezioruan.github.io/2022/07/19/managing-infrastructure-with-terraform/"/>
    <id>https://ezioruan.github.io/2022/07/19/managing-infrastructure-with-terraform/</id>
    <published>2022-07-19T09:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;In modern software development, the line between writing code and managing infrastructure is blurring. The rise of cloud computing has led to the need for a more dynamic and automated way to provision and manage resources. This is where Infrastructure as Code (IaC) comes in, and Terraform is one of the most popular tools leading the charge.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Infrastructure, Terraform, IaC, DevOps" scheme="https://ezioruan.github.io/tags/Infrastructure-Terraform-IaC-DevOps/"/>
    
  </entry>
  
  <entry>
    <title>How to do data migration</title>
    <link href="https://ezioruan.github.io/2022/07/18/how-to-do-data-migration/"/>
    <id>https://ezioruan.github.io/2022/07/18/how-to-do-data-migration/</id>
    <published>2022-07-18T08:18:15.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;#What is Data Migration?&lt;br&gt;Data migration is the process of moving data from one system to another. While this might seem straightforward, it involves storage, database, or application change.&lt;br&gt;Any data migration will involve at least the transform and load steps in the context of the extract&amp;#x2F;transform&amp;#x2F;load (ETL) process. This means that extracted data needs to go through a series of functions in preparation, after which it can be loaded into a target location.&lt;/p&gt;
&lt;p&gt;A strategic data migration plan should include consideration of these critical factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Knowing the data&lt;/em&gt; — Before migration, source data must undergo a complete audit. Unexpected issues can surface if this step is ignored.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cleanup&lt;/em&gt; — Once you identify any issues with your source data, they must be resolved. This may require additional software tools and third-party resources because of the scale of the work.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Maintenance&lt;/em&gt; and protection — Data undergoes degradation after some time, making it unreliable. This means there must be controls in place to maintain data quality.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Governance&lt;/em&gt; — Tracking and reporting on data quality is crucial because it enables a better understanding of data integrity. The processes and tools used to produce this information should be highly usable and automate functions where possible.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="System Architecture" scheme="https://ezioruan.github.io/tags/System-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>How to Configure VLANs and DHCP using dnsmasq and veth pairs in Linux</title>
    <link href="https://ezioruan.github.io/2022/07/10/How_to_Configure_VLANs_and_DHCP_using_dnsmasq_and_veth_pairs_in_Linux/"/>
    <id>https://ezioruan.github.io/2022/07/10/How_to_Configure_VLANs_and_DHCP_using_dnsmasq_and_veth_pairs_in_Linux/</id>
    <published>2022-07-10T15:07:06.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Configuring-VLANs-and-DHCP-for-User-Groups&quot;&gt;&lt;a href=&quot;#Configuring-VLANs-and-DHCP-for-User-Groups&quot; class=&quot;headerlink&quot; title=&quot;Configuring VLANs and DHCP for User Groups&quot;&gt;&lt;/a&gt;Configuring VLANs and DHCP for User Groups&lt;/h1&gt;&lt;p&gt;In a network environment, it is sometimes necessary to segment different user groups to improve security and performance. VLANs (Virtual Local Area Networks) provide a way to do this by dividing a physical network into multiple logical networks. This allows different user groups to be isolated from each other and to have their own set of configurations, such as DHCP (Dynamic Host Configuration Protocol) settings.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will go through the steps of configuring VLANs and DHCP for different user groups.&lt;/p&gt;
&lt;h2 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;Before we begin, we assume that you have the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Linux machine with a network interface named tap_home that is connected to a physical network&lt;/li&gt;
&lt;li&gt;Root access to the Linux machine&lt;/li&gt;
&lt;li&gt;Basic knowledge of networking concepts, such as IP addresses and subnets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/How_to_Configure_VLANs_and_DHCP_using_dnsmasq_and_veth_pairs_in_Linux.png&quot; alt=&quot;network_topology-overview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Creating-VLANs&quot;&gt;&lt;a href=&quot;#Creating-VLANs&quot; class=&quot;headerlink&quot; title=&quot;Creating VLANs&quot;&gt;&lt;/a&gt;Creating VLANs&lt;/h2&gt;&lt;p&gt;The first step is to create VLANs for each user group. We will create two VLANs, one for each user group, with IDs 100 and 200.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip link add link tap_home name tap_home.100 type vlan id 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip link add link tap_home name tap_home.200 type vlan id 200&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Networking" scheme="https://ezioruan.github.io/tags/Networking/"/>
    
  </entry>
  
  <entry>
    <title>From REST to gRPC: A Guide to Modern API Communication</title>
    <link href="https://ezioruan.github.io/2022/03/25/from-rest-to-grpc/"/>
    <id>https://ezioruan.github.io/2022/03/25/from-rest-to-grpc/</id>
    <published>2022-03-25T10:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;For years, REST has been the dominant architectural style for building APIs, using the familiar verbs of HTTP and the flexibility of JSON. However, as systems evolve into complex networks of microservices, the need for more performant and strongly-typed communication has grown. Enter gRPC, a modern RPC (Remote Procedure Call) framework developed by Google that is rapidly gaining traction in the world of backend development.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Backend, Architecture, gRPC, API" scheme="https://ezioruan.github.io/tags/Backend-Architecture-gRPC-API/"/>
    
  </entry>
  
  <entry>
    <title>Develop APISIX plugin via Golang</title>
    <link href="https://ezioruan.github.io/2022/03/08/develop-apisix-plugin-via-go/"/>
    <id>https://ezioruan.github.io/2022/03/08/develop-apisix-plugin-via-go/</id>
    <published>2022-03-08T08:18:15.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Develop-APISIX-plugin-via-Golang&quot;&gt;&lt;a href=&quot;#Develop-APISIX-plugin-via-Golang&quot; class=&quot;headerlink&quot; title=&quot;Develop APISIX plugin via Golang&quot;&gt;&lt;/a&gt;Develop APISIX plugin via Golang&lt;/h1&gt;&lt;p&gt;APISIX allows users to extend functions through plugins, Although the Apache APISIX kernel code is written in Lua by the plugin, Apache APISIX supports the development of plugins in multiple languages, such as Go and Java. This article will explain in detail how to use plugins to develop Apache APISIX.&lt;br&gt;We will write an HTTP base auth plugin in Golang&lt;/p&gt;
&lt;h2 id=&quot;write-the-plugin&quot;&gt;&lt;a href=&quot;#write-the-plugin&quot; class=&quot;headerlink&quot; title=&quot;write the plugin&quot;&gt;&lt;/a&gt;write the plugin&lt;/h2&gt;&lt;h3 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Go (&amp;gt;&amp;#x3D; 1.15)&lt;/li&gt;
&lt;li&gt;apisix-go-plugin-runner&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s look at the Plugin interface, To write a custom plugin, we need to implement the plugin’s interface  &lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type Plugin interface &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // Name returns the plguin name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Name() string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // ParseConf is the method to parse the given plugin configuration. When the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // configuration can&amp;#x27;t be parsed, it will be skipped.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ParseConf(in []byte) (conf interface&amp;#123;&amp;#125;, err error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // Filter is the method to handle request.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // It is like the `http.ServeHTTP`, plus the ctx and the configuration created by&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // ParseConf.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // When the `w` is written, the execution of the plugin chain will be stopped.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // We don&amp;#x27;t use onion model like Gin/Caddy because we don&amp;#x27;t serve the whole request lifecycle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // inside the runner. The plugin is only a filter running at one stage.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Filter(conf interface&amp;#123;&amp;#125;, w http.ResponseWriter, r pkgHTTP.Request)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="System Architecture" scheme="https://ezioruan.github.io/tags/System-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Exploring Structural Pattern Matching in Python 3.10</title>
    <link href="https://ezioruan.github.io/2022/02/18/exploring-structural-pattern-matching-python-3-10/"/>
    <id>https://ezioruan.github.io/2022/02/18/exploring-structural-pattern-matching-python-3-10/</id>
    <published>2022-02-18T09:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;Python 3.10 introduced a host of new features, but perhaps the most talked-about is Structural Pattern Matching. This feature, introduced in PEP 634, adds a &lt;code&gt;match&lt;/code&gt; statement that behaves like a &lt;code&gt;switch&lt;/code&gt; statement found in other languages, but with much more power and flexibility. It allows you to match variables against a variety of patterns, making complex conditional logic more readable and less error-prone.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python, Python3.10, Pattern Matching" scheme="https://ezioruan.github.io/tags/Python-Python3-10-Pattern-Matching/"/>
    
  </entry>
  
  <entry>
    <title>resize disk sise for ubuntu instance in Oracle Cloud</title>
    <link href="https://ezioruan.github.io/2022/02/08/resize-disk-on-ubuntu-oracle-cloud/"/>
    <id>https://ezioruan.github.io/2022/02/08/resize-disk-on-ubuntu-oracle-cloud/</id>
    <published>2022-02-08T08:18:15.000Z</published>
    <updated>2025-07-12T06:02:34.559Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;oracle has tools to increase disk sise for Oracle Image, but not ubuntu, we need to do it manualy&lt;/p&gt;
&lt;p&gt;The script internally calls</summary>
        
      
    
    
    
    
    <category term="tools" scheme="https://ezioruan.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Async/Await: A Tale of Two Runtimes (Node.js vs. Python)</title>
    <link href="https://ezioruan.github.io/2021/12/15/async-await-nodejs-vs-python/"/>
    <id>https://ezioruan.github.io/2021/12/15/async-await-nodejs-vs-python/</id>
    <published>2021-12-15T11:00:00.000Z</published>
    <updated>2025-07-12T06:02:34.558Z</updated>
    
    
    <summary type="html">&lt;p&gt;Both Node.js and Python have embraced the &lt;code&gt;async/await&lt;/code&gt; syntax to simplify asynchronous programming. While the keywords are the same and the high-level concept is similar—making asynchronous code look synchronous—the underlying models and ecosystems have key differences. Understanding these distinctions is crucial for developers working in both environments.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python, Node.js, asyncio, Concurrency" scheme="https://ezioruan.github.io/tags/Python-Node-js-asyncio-Concurrency/"/>
    
  </entry>
  
</feed>
